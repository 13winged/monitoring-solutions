name: CI/CD for Monitoring Solutions

on:
  push:
    branches: [main, master]
  pull_request:
    branches: [main, master]

jobs:
  lint-and-test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        component: ['process-monitor', 'port-checker', 'ssl-checker']
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Setup environment
      run: |
        echo "SHELL=/bin/bash" >> $GITHUB_ENV
        # Установка всех зависимостей одним шагом
        sudo apt-get update
        sudo apt-get install -y shellcheck openssl curl procps netcat-openbsd

    - name: Lint check for ${{ matrix.component }}
      run: |
        cd ${{ matrix.component }}
        # Ищем shell-скрипты во всех директориях компонента
        find . -name "*.sh" -exec shellcheck {} \; || echo "ShellCheck issues found but not failing build"

    - name: Validate configuration examples
      run: |
        cd ${{ matrix.component }}
        if [ -d "examples" ]; then
          # Даем права на выполнение скрипту валидации
          if [ -f "scripts/validate-config.sh" ]; then
            chmod +x scripts/validate-config.sh
          fi
          
          cd examples
          for conf_file in *.conf*; do
            if [ -f "$conf_file" ]; then
              echo "Validating $conf_file"
              if [ -f "../scripts/validate-config.sh" ]; then
                # Явно запускаем через bash если нет прав
                bash ../scripts/validate-config.sh "$conf_file"
              fi
            fi
          done
        fi

    - name: Test ${{ matrix.component }}
      run: |
        cd ${{ matrix.component }}
        if [ -f "scripts/test.sh" ]; then
          chmod +x scripts/test.sh
          ./scripts/test.sh
        else
          echo "No test script found for ${{ matrix.component }}, skipping tests."
        fi

  docker-build:
    runs-on: ubuntu-latest
    if: github.event_name == 'push'
    needs: lint-and-test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: Build and push Docker images
      uses: docker/build-push-action@v4
      with:
        context: .
        push: false
        tags: monitoring-solutions:latest
        file: Dockerfile

  release:
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    needs: lint-and-test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Create release archive
      run: |
        mkdir -p release
        # Копируем только существующие директории
        [ -d "process-monitor" ] && cp -r process-monitor release/
        [ -d "port-checker" ] && cp -r port-checker release/
        [ -d "ssl-checker" ] && cp -r ssl-checker release/
        [ -d "docker" ] && cp -r docker release/
        [ -d "scripts" ] && cp -r scripts release/
        [ -d "docs" ] && cp -r docs release/
        [ -d "examples" ] && cp -r examples release/
        
        # Копируем только существующие файлы
        [ -f "LICENSE" ] && cp LICENSE release/
        [ -f "README.md" ] && cp README.md release/
        [ -f "CHANGELOG.md" ] && cp CHANGELOG.md release/
        
        tar -czf monitoring-solutions-${GITHUB_REF#refs/tags/}.tar.gz -C release .
        
    - name: Upload release asset
      uses: actions/upload-artifact@v3
      with:
        name: monitoring-solutions-package
        path: monitoring-solutions-${GITHUB_REF#refs/tags/}.tar.gz